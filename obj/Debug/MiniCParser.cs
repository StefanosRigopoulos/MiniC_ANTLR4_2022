//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\UOP\7th Semester\Compilers II\Laboratory\MiniC\MiniC.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MiniC {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MiniCParser : Parser {
	public const int
		FUNCTION=1, IF=2, ELSE=3, FOR=4, WHILE=5, DO=6, SWITCH=7, CASE=8, DEFAULT=9, 
		RETURN=10, BREAK=11, INTSPECIFIER=12, DOUBLESPECIFIER=13, STRINGSPECIFIER=14, 
		LP=15, RP=16, LB=17, RB=18, SEMICOLON=19, COLON=20, COMMA=21, PLUS=22, 
		MINUS=23, MULTI=24, DIV=25, ASSIGN=26, PLUSONE=27, MINUSONE=28, AND=29, 
		OR=30, NOT=31, GT=32, GTE=33, LT=34, LTE=35, EQUAL=36, NEQUAL=37, DOUBLE=38, 
		INTEGER=39, VARIABLE=40, STRING=41, COMMENT=42, WS=43;
	public const int
		RULE_compileUnit = 0, RULE_function_definition = 1, RULE_fargs = 2, RULE_statement = 3, 
		RULE_expr_statement = 4, RULE_if_statement = 5, RULE_for_statement = 6, 
		RULE_while_statement = 7, RULE_do_while_statement = 8, RULE_switch_statement = 9, 
		RULE_switch_case = 10, RULE_switch_default = 11, RULE_return_statement = 12, 
		RULE_break_statement = 13, RULE_null_statement = 14, RULE_compound_statement = 15, 
		RULE_statements = 16, RULE_expr = 17, RULE_specifier = 18, RULE_args = 19;
	public static readonly string[] ruleNames = {
		"compileUnit", "function_definition", "fargs", "statement", "expr_statement", 
		"if_statement", "for_statement", "while_statement", "do_while_statement", 
		"switch_statement", "switch_case", "switch_default", "return_statement", 
		"break_statement", "null_statement", "compound_statement", "statements", 
		"expr", "specifier", "args"
	};

	private static readonly string[] _LiteralNames = {
		null, "'function'", "'if'", "'else'", "'for'", "'while'", "'do'", "'switch'", 
		"'case'", "'default'", "'return'", "'break'", "'int'", "'double'", "'string'", 
		"'('", "')'", "'{'", "'}'", "';'", "':'", "','", "'+'", "'-'", "'*'", 
		"'/'", "'='", "'++'", "'--'", "'&&'", "'||'", "'!'", "'>'", "'>='", "'<'", 
		"'<='", "'=='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FUNCTION", "IF", "ELSE", "FOR", "WHILE", "DO", "SWITCH", "CASE", 
		"DEFAULT", "RETURN", "BREAK", "INTSPECIFIER", "DOUBLESPECIFIER", "STRINGSPECIFIER", 
		"LP", "RP", "LB", "RB", "SEMICOLON", "COLON", "COMMA", "PLUS", "MINUS", 
		"MULTI", "DIV", "ASSIGN", "PLUSONE", "MINUSONE", "AND", "OR", "NOT", "GT", 
		"GTE", "LT", "LTE", "EQUAL", "NEQUAL", "DOUBLE", "INTEGER", "VARIABLE", 
		"STRING", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MiniCParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MiniCParser.Eof, 0); }
		public Function_definitionContext[] function_definition() {
			return GetRuleContexts<Function_definitionContext>();
		}
		public Function_definitionContext function_definition(int i) {
			return GetRuleContext<Function_definitionContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 42;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case FUNCTION:
					{
					State = 40; function_definition();
					}
					break;
				case IF:
				case FOR:
				case WHILE:
				case DO:
				case SWITCH:
				case RETURN:
				case BREAK:
				case INTSPECIFIER:
				case DOUBLESPECIFIER:
				case STRINGSPECIFIER:
				case LP:
				case LB:
				case SEMICOLON:
				case PLUS:
				case MINUS:
				case NOT:
				case DOUBLE:
				case INTEGER:
				case VARIABLE:
				case STRING:
				case COMMENT:
					{
					State = 41; statement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 44;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNCTION) | (1L << IF) | (1L << FOR) | (1L << WHILE) | (1L << DO) | (1L << SWITCH) | (1L << RETURN) | (1L << BREAK) | (1L << INTSPECIFIER) | (1L << DOUBLESPECIFIER) | (1L << STRINGSPECIFIER) | (1L << LP) | (1L << LB) | (1L << SEMICOLON) | (1L << PLUS) | (1L << MINUS) | (1L << NOT) | (1L << DOUBLE) | (1L << INTEGER) | (1L << VARIABLE) | (1L << STRING) | (1L << COMMENT))) != 0) );
			State = 46; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_definitionContext : ParserRuleContext {
		public Function_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_definition; } }
	 
		public Function_definitionContext() { }
		public virtual void CopyFrom(Function_definitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionDefinitionContext : Function_definitionContext {
		public ITerminalNode FUNCTION() { return GetToken(MiniCParser.FUNCTION, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode LP() { return GetToken(MiniCParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(MiniCParser.RP, 0); }
		public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		public FargsContext fargs() {
			return GetRuleContext<FargsContext>(0);
		}
		public FunctionDefinitionContext(Function_definitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_definitionContext function_definition() {
		Function_definitionContext _localctx = new Function_definitionContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_function_definition);
		int _la;
		try {
			_localctx = new FunctionDefinitionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; Match(FUNCTION);
			State = 49; expr(0);
			State = 50; Match(LP);
			State = 52;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTSPECIFIER) | (1L << DOUBLESPECIFIER) | (1L << STRINGSPECIFIER) | (1L << LP) | (1L << PLUS) | (1L << MINUS) | (1L << NOT) | (1L << DOUBLE) | (1L << INTEGER) | (1L << VARIABLE) | (1L << STRING) | (1L << COMMENT))) != 0)) {
				{
				State = 51; fargs();
				}
			}

			State = 54; Match(RP);
			State = 55; compound_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FargsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MiniCParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MiniCParser.COMMA, i);
		}
		public FargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fargs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterFargs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitFargs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFargs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FargsContext fargs() {
		FargsContext _localctx = new FargsContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_fargs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; expr(0);
			State = 62;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 58; Match(COMMA);
				State = 59; expr(0);
				}
				}
				State = 64;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Expr_statementContext expr_statement() {
			return GetRuleContext<Expr_statementContext>(0);
		}
		public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public For_statementContext for_statement() {
			return GetRuleContext<For_statementContext>(0);
		}
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public Do_while_statementContext do_while_statement() {
			return GetRuleContext<Do_while_statementContext>(0);
		}
		public Switch_statementContext switch_statement() {
			return GetRuleContext<Switch_statementContext>(0);
		}
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Break_statementContext break_statement() {
			return GetRuleContext<Break_statementContext>(0);
		}
		public Null_statementContext null_statement() {
			return GetRuleContext<Null_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 75;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INTSPECIFIER:
			case DOUBLESPECIFIER:
			case STRINGSPECIFIER:
			case LP:
			case PLUS:
			case MINUS:
			case NOT:
			case DOUBLE:
			case INTEGER:
			case VARIABLE:
			case STRING:
			case COMMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65; expr_statement();
				}
				break;
			case LB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66; compound_statement();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 67; if_statement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 68; for_statement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 69; while_statement();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 6);
				{
				State = 70; do_while_statement();
				}
				break;
			case SWITCH:
				EnterOuterAlt(_localctx, 7);
				{
				State = 71; switch_statement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 8);
				{
				State = 72; return_statement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 9);
				{
				State = 73; break_statement();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 10);
				{
				State = 74; null_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_statementContext : ParserRuleContext {
		public Expr_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_statement; } }
	 
		public Expr_statementContext() { }
		public virtual void CopyFrom(Expr_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementExprContext : Expr_statementContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(MiniCParser.SEMICOLON, 0); }
		public StatementExprContext(Expr_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterStatementExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitStatementExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_statementContext expr_statement() {
		Expr_statementContext _localctx = new Expr_statementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_expr_statement);
		try {
			_localctx = new StatementExprContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; expr(0);
			State = 78; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
	 
		public If_statementContext() { }
		public virtual void CopyFrom(If_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementIfContext : If_statementContext {
		public ITerminalNode IF() { return GetToken(MiniCParser.IF, 0); }
		public ITerminalNode LP() { return GetToken(MiniCParser.LP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RP() { return GetToken(MiniCParser.RP, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(MiniCParser.ELSE, 0); }
		public StatementIfContext(If_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterStatementIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitStatementIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_if_statement);
		try {
			_localctx = new StatementIfContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(IF);
			State = 81; Match(LP);
			State = 82; expr(0);
			State = 83; Match(RP);
			State = 84; statement();
			State = 87;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				State = 85; Match(ELSE);
				State = 86; statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_statementContext : ParserRuleContext {
		public For_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_statement; } }
	 
		public For_statementContext() { }
		public virtual void CopyFrom(For_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementForContext : For_statementContext {
		public ITerminalNode FOR() { return GetToken(MiniCParser.FOR, 0); }
		public ITerminalNode LP() { return GetToken(MiniCParser.LP, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(MiniCParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(MiniCParser.SEMICOLON, i);
		}
		public ITerminalNode RP() { return GetToken(MiniCParser.RP, 0); }
		public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		public StatementForContext(For_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterStatementFor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitStatementFor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_statementContext for_statement() {
		For_statementContext _localctx = new For_statementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_for_statement);
		try {
			_localctx = new StatementForContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(FOR);
			State = 90; Match(LP);
			State = 91; expr(0);
			State = 92; Match(SEMICOLON);
			State = 93; expr(0);
			State = 94; Match(SEMICOLON);
			State = 95; expr(0);
			State = 96; Match(RP);
			State = 97; compound_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
	 
		public While_statementContext() { }
		public virtual void CopyFrom(While_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementWhileContext : While_statementContext {
		public ITerminalNode WHILE() { return GetToken(MiniCParser.WHILE, 0); }
		public ITerminalNode LP() { return GetToken(MiniCParser.LP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RP() { return GetToken(MiniCParser.RP, 0); }
		public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		public StatementWhileContext(While_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterStatementWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitStatementWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_while_statement);
		try {
			_localctx = new StatementWhileContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(WHILE);
			State = 100; Match(LP);
			State = 101; expr(0);
			State = 102; Match(RP);
			State = 103; compound_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_while_statementContext : ParserRuleContext {
		public Do_while_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_while_statement; } }
	 
		public Do_while_statementContext() { }
		public virtual void CopyFrom(Do_while_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementDoWhileContext : Do_while_statementContext {
		public ITerminalNode DO() { return GetToken(MiniCParser.DO, 0); }
		public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(MiniCParser.WHILE, 0); }
		public ITerminalNode LP() { return GetToken(MiniCParser.LP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RP() { return GetToken(MiniCParser.RP, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(MiniCParser.SEMICOLON, 0); }
		public StatementDoWhileContext(Do_while_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterStatementDoWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitStatementDoWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementDoWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Do_while_statementContext do_while_statement() {
		Do_while_statementContext _localctx = new Do_while_statementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_do_while_statement);
		try {
			_localctx = new StatementDoWhileContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; Match(DO);
			State = 106; compound_statement();
			State = 107; Match(WHILE);
			State = 108; Match(LP);
			State = 109; expr(0);
			State = 110; Match(RP);
			State = 111; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_statementContext : ParserRuleContext {
		public Switch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_statement; } }
	 
		public Switch_statementContext() { }
		public virtual void CopyFrom(Switch_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementSwitchContext : Switch_statementContext {
		public ITerminalNode SWITCH() { return GetToken(MiniCParser.SWITCH, 0); }
		public ITerminalNode LP() { return GetToken(MiniCParser.LP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RP() { return GetToken(MiniCParser.RP, 0); }
		public ITerminalNode LB() { return GetToken(MiniCParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(MiniCParser.RB, 0); }
		public Switch_caseContext[] switch_case() {
			return GetRuleContexts<Switch_caseContext>();
		}
		public Switch_caseContext switch_case(int i) {
			return GetRuleContext<Switch_caseContext>(i);
		}
		public Switch_defaultContext switch_default() {
			return GetRuleContext<Switch_defaultContext>(0);
		}
		public StatementSwitchContext(Switch_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterStatementSwitch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitStatementSwitch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementSwitch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_statementContext switch_statement() {
		Switch_statementContext _localctx = new Switch_statementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_switch_statement);
		int _la;
		try {
			_localctx = new StatementSwitchContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(SWITCH);
			State = 114; Match(LP);
			State = 115; expr(0);
			State = 116; Match(RP);
			State = 117; Match(LB);
			State = 119;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 118; switch_case();
				}
				}
				State = 121;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==CASE );
			State = 124;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==DEFAULT) {
				{
				State = 123; switch_default();
				}
			}

			State = 126; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_caseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(MiniCParser.CASE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(MiniCParser.COLON, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Switch_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_case; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterSwitch_case(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitSwitch_case(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_caseContext switch_case() {
		Switch_caseContext _localctx = new Switch_caseContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_switch_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; Match(CASE);
			State = 129; expr(0);
			State = 130; Match(COLON);
			State = 131; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_defaultContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(MiniCParser.DEFAULT, 0); }
		public ITerminalNode COLON() { return GetToken(MiniCParser.COLON, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Switch_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_default; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterSwitch_default(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitSwitch_default(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_defaultContext switch_default() {
		Switch_defaultContext _localctx = new Switch_defaultContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_switch_default);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(DEFAULT);
			State = 134; Match(COLON);
			State = 135; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
	 
		public Return_statementContext() { }
		public virtual void CopyFrom(Return_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementRETURNContext : Return_statementContext {
		public ITerminalNode RETURN() { return GetToken(MiniCParser.RETURN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(MiniCParser.SEMICOLON, 0); }
		public StatementRETURNContext(Return_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterStatementRETURN(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitStatementRETURN(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementRETURN(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_return_statement);
		try {
			_localctx = new StatementRETURNContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; Match(RETURN);
			State = 138; expr(0);
			State = 139; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_statementContext : ParserRuleContext {
		public Break_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_statement; } }
	 
		public Break_statementContext() { }
		public virtual void CopyFrom(Break_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementBREAKContext : Break_statementContext {
		public ITerminalNode BREAK() { return GetToken(MiniCParser.BREAK, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(MiniCParser.SEMICOLON, 0); }
		public StatementBREAKContext(Break_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterStatementBREAK(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitStatementBREAK(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBREAK(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Break_statementContext break_statement() {
		Break_statementContext _localctx = new Break_statementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_break_statement);
		try {
			_localctx = new StatementBREAKContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(BREAK);
			State = 142; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_statementContext : ParserRuleContext {
		public Null_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_statement; } }
	 
		public Null_statementContext() { }
		public virtual void CopyFrom(Null_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementNULLContext : Null_statementContext {
		public ITerminalNode SEMICOLON() { return GetToken(MiniCParser.SEMICOLON, 0); }
		public StatementNULLContext(Null_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterStatementNULL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitStatementNULL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementNULL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_statementContext null_statement() {
		Null_statementContext _localctx = new Null_statementContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_null_statement);
		try {
			_localctx = new StatementNULLContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_statementContext : ParserRuleContext {
		public Compound_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_statement; } }
	 
		public Compound_statementContext() { }
		public virtual void CopyFrom(Compound_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementCompoundContext : Compound_statementContext {
		public ITerminalNode LB() { return GetToken(MiniCParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(MiniCParser.RB, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public StatementCompoundContext(Compound_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterStatementCompound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitStatementCompound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementCompound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_statementContext compound_statement() {
		Compound_statementContext _localctx = new Compound_statementContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_compound_statement);
		int _la;
		try {
			_localctx = new StatementCompoundContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(LB);
			State = 148;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << FOR) | (1L << WHILE) | (1L << DO) | (1L << SWITCH) | (1L << RETURN) | (1L << BREAK) | (1L << INTSPECIFIER) | (1L << DOUBLESPECIFIER) | (1L << STRINGSPECIFIER) | (1L << LP) | (1L << LB) | (1L << SEMICOLON) | (1L << PLUS) | (1L << MINUS) | (1L << NOT) | (1L << DOUBLE) | (1L << INTEGER) | (1L << VARIABLE) | (1L << STRING) | (1L << COMMENT))) != 0)) {
				{
				State = 147; statements();
				}
			}

			State = 150; Match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 152; statement();
				}
				}
				State = 155;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << FOR) | (1L << WHILE) | (1L << DO) | (1L << SWITCH) | (1L << RETURN) | (1L << BREAK) | (1L << INTSPECIFIER) | (1L << DOUBLESPECIFIER) | (1L << STRINGSPECIFIER) | (1L << LP) | (1L << LB) | (1L << SEMICOLON) | (1L << PLUS) | (1L << MINUS) | (1L << NOT) | (1L << DOUBLE) | (1L << INTEGER) | (1L << VARIABLE) | (1L << STRING) | (1L << COMMENT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprINTEGERContext : ExprContext {
		public ITerminalNode INTEGER() { return GetToken(MiniCParser.INTEGER, 0); }
		public ExprINTEGERContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterExprINTEGER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitExprINTEGER(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprINTEGER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprSpecVARIABLEContext : ExprContext {
		public SpecifierContext specifier() {
			return GetRuleContext<SpecifierContext>(0);
		}
		public ITerminalNode VARIABLE() { return GetToken(MiniCParser.VARIABLE, 0); }
		public ExprSpecVARIABLEContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterExprSpecVARIABLE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitExprSpecVARIABLE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprSpecVARIABLE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprComparisonContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode EQUAL() { return GetToken(MiniCParser.EQUAL, 0); }
		public ITerminalNode NEQUAL() { return GetToken(MiniCParser.NEQUAL, 0); }
		public ExprComparisonContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterExprComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitExprComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprRelationalOperatorsContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode GT() { return GetToken(MiniCParser.GT, 0); }
		public ITerminalNode GTE() { return GetToken(MiniCParser.GTE, 0); }
		public ITerminalNode LT() { return GetToken(MiniCParser.LT, 0); }
		public ITerminalNode LTE() { return GetToken(MiniCParser.LTE, 0); }
		public ExprRelationalOperatorsContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterExprRelationalOperators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitExprRelationalOperators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprRelationalOperators(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprVARIABLEContext : ExprContext {
		public ITerminalNode VARIABLE() { return GetToken(MiniCParser.VARIABLE, 0); }
		public ExprVARIABLEContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterExprVARIABLE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitExprVARIABLE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprVARIABLE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprNotContext : ExprContext {
		public ITerminalNode NOT() { return GetToken(MiniCParser.NOT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprNotContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterExprNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitExprNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprParenthesisContext : ExprContext {
		public ITerminalNode LP() { return GetToken(MiniCParser.LP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RP() { return GetToken(MiniCParser.RP, 0); }
		public ExprParenthesisContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterExprParenthesis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitExprParenthesis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprAddSubContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(MiniCParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(MiniCParser.MINUS, 0); }
		public ExprAddSubContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterExprAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitExprAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprAndContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AND() { return GetToken(MiniCParser.AND, 0); }
		public ExprAndContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterExprAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitExprAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprCOMMENTContext : ExprContext {
		public ITerminalNode COMMENT() { return GetToken(MiniCParser.COMMENT, 0); }
		public ExprCOMMENTContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterExprCOMMENT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitExprCOMMENT(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprCOMMENT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprUnaryPlusContext : ExprContext {
		public ITerminalNode PLUS() { return GetToken(MiniCParser.PLUS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprUnaryPlusContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterExprUnaryPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitExprUnaryPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprUnaryPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprMulDivContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MULTI() { return GetToken(MiniCParser.MULTI, 0); }
		public ITerminalNode DIV() { return GetToken(MiniCParser.DIV, 0); }
		public ExprMulDivContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterExprMulDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitExprMulDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprMulDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprFCallContext : ExprContext {
		public ITerminalNode VARIABLE() { return GetToken(MiniCParser.VARIABLE, 0); }
		public ITerminalNode LP() { return GetToken(MiniCParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(MiniCParser.RP, 0); }
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public ExprFCallContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterExprFCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitExprFCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprFCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprDOUBLEContext : ExprContext {
		public ITerminalNode DOUBLE() { return GetToken(MiniCParser.DOUBLE, 0); }
		public ExprDOUBLEContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterExprDOUBLE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitExprDOUBLE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprDOUBLE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOrContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OR() { return GetToken(MiniCParser.OR, 0); }
		public ExprOrContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterExprOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitExprOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprSTRINGContext : ExprContext {
		public ITerminalNode STRING() { return GetToken(MiniCParser.STRING, 0); }
		public ExprSTRINGContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterExprSTRING(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitExprSTRING(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprSTRING(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprUnaryMinusContext : ExprContext {
		public ITerminalNode MINUS() { return GetToken(MiniCParser.MINUS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprUnaryMinusContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterExprUnaryMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitExprUnaryMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprUnaryMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprPlusOneContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PLUSONE() { return GetToken(MiniCParser.PLUSONE, 0); }
		public ExprPlusOneContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterExprPlusOne(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitExprPlusOne(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprPlusOne(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprAssignmentContext : ExprContext {
		public ITerminalNode VARIABLE() { return GetToken(MiniCParser.VARIABLE, 0); }
		public ITerminalNode ASSIGN() { return GetToken(MiniCParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprAssignmentContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterExprAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitExprAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprMinusOneContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode MINUSONE() { return GetToken(MiniCParser.MINUSONE, 0); }
		public ExprMinusOneContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterExprMinusOne(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitExprMinusOne(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprMinusOne(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				_localctx = new ExprCOMMENTContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 158; Match(COMMENT);
				}
				break;

			case 2:
				{
				_localctx = new ExprSTRINGContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 159; Match(STRING);
				}
				break;

			case 3:
				{
				_localctx = new ExprINTEGERContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 160; Match(INTEGER);
				}
				break;

			case 4:
				{
				_localctx = new ExprDOUBLEContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 161; Match(DOUBLE);
				}
				break;

			case 5:
				{
				_localctx = new ExprSpecVARIABLEContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 162; specifier();
				State = 163; Match(VARIABLE);
				}
				break;

			case 6:
				{
				_localctx = new ExprVARIABLEContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 165; Match(VARIABLE);
				}
				break;

			case 7:
				{
				_localctx = new ExprFCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 166; Match(VARIABLE);
				State = 167; Match(LP);
				State = 169;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTSPECIFIER) | (1L << DOUBLESPECIFIER) | (1L << STRINGSPECIFIER) | (1L << LP) | (1L << PLUS) | (1L << MINUS) | (1L << NOT) | (1L << DOUBLE) | (1L << INTEGER) | (1L << VARIABLE) | (1L << STRING) | (1L << COMMENT))) != 0)) {
					{
					State = 168; args();
					}
				}

				State = 171; Match(RP);
				}
				break;

			case 8:
				{
				_localctx = new ExprUnaryPlusContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 172; Match(PLUS);
				State = 173; expr(11);
				}
				break;

			case 9:
				{
				_localctx = new ExprUnaryMinusContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 174; Match(MINUS);
				State = 175; expr(10);
				}
				break;

			case 10:
				{
				_localctx = new ExprNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 176; Match(NOT);
				State = 177; expr(9);
				}
				break;

			case 11:
				{
				_localctx = new ExprParenthesisContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 178; Match(LP);
				State = 179; expr(0);
				State = 180; Match(RP);
				}
				break;

			case 12:
				{
				_localctx = new ExprAssignmentContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 182; Match(VARIABLE);
				State = 183; Match(ASSIGN);
				State = 184; expr(1);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 211;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 209;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
					case 1:
						{
						_localctx = new ExprMulDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 187;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 188;
						((ExprMulDivContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==MULTI || _la==DIV) ) {
							((ExprMulDivContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 189; expr(9);
						}
						break;

					case 2:
						{
						_localctx = new ExprAddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 190;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 191;
						((ExprAddSubContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((ExprAddSubContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 192; expr(8);
						}
						break;

					case 3:
						{
						_localctx = new ExprRelationalOperatorsContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 193;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 194;
						((ExprRelationalOperatorsContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << GTE) | (1L << LT) | (1L << LTE))) != 0)) ) {
							((ExprRelationalOperatorsContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 195; expr(6);
						}
						break;

					case 4:
						{
						_localctx = new ExprComparisonContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 196;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 197;
						((ExprComparisonContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==EQUAL || _la==NEQUAL) ) {
							((ExprComparisonContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 198; expr(5);
						}
						break;

					case 5:
						{
						_localctx = new ExprAndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 199;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 200; Match(AND);
						State = 201; expr(4);
						}
						break;

					case 6:
						{
						_localctx = new ExprOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 202;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 203; Match(OR);
						State = 204; expr(3);
						}
						break;

					case 7:
						{
						_localctx = new ExprPlusOneContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 205;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 206; Match(PLUSONE);
						}
						break;

					case 8:
						{
						_localctx = new ExprMinusOneContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 207;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 208; Match(MINUSONE);
						}
						break;
					}
					} 
				}
				State = 213;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SpecifierContext : ParserRuleContext {
		public SpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specifier; } }
	 
		public SpecifierContext() { }
		public virtual void CopyFrom(SpecifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SpecSTRINGContext : SpecifierContext {
		public ITerminalNode STRINGSPECIFIER() { return GetToken(MiniCParser.STRINGSPECIFIER, 0); }
		public SpecSTRINGContext(SpecifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterSpecSTRING(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitSpecSTRING(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecSTRING(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SpecDOUBLEContext : SpecifierContext {
		public ITerminalNode DOUBLESPECIFIER() { return GetToken(MiniCParser.DOUBLESPECIFIER, 0); }
		public SpecDOUBLEContext(SpecifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterSpecDOUBLE(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitSpecDOUBLE(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecDOUBLE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SpecINTEGERContext : SpecifierContext {
		public ITerminalNode INTSPECIFIER() { return GetToken(MiniCParser.INTSPECIFIER, 0); }
		public SpecINTEGERContext(SpecifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterSpecINTEGER(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitSpecINTEGER(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecINTEGER(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecifierContext specifier() {
		SpecifierContext _localctx = new SpecifierContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_specifier);
		try {
			State = 217;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INTSPECIFIER:
				_localctx = new SpecINTEGERContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 214; Match(INTSPECIFIER);
				}
				break;
			case DOUBLESPECIFIER:
				_localctx = new SpecDOUBLEContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 215; Match(DOUBLESPECIFIER);
				}
				break;
			case STRINGSPECIFIER:
				_localctx = new SpecSTRINGContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 216; Match(STRINGSPECIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MiniCParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MiniCParser.COMMA, i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; expr(0);
			State = 224;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 220; Match(COMMA);
				State = 221; expr(0);
				}
				}
				State = 226;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 17: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 8);

		case 1: return Precpred(_ctx, 7);

		case 2: return Precpred(_ctx, 5);

		case 3: return Precpred(_ctx, 4);

		case 4: return Precpred(_ctx, 3);

		case 5: return Precpred(_ctx, 2);

		case 6: return Precpred(_ctx, 13);

		case 7: return Precpred(_ctx, 12);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3-\xE6\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x3\x2\x3\x2\x6\x2-\n\x2\r\x2\xE\x2.\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x5\x3\x37\n\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\a\x4?\n\x4\f\x4"+
		"\xE\x4\x42\v\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x5\x5N\n\x5\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x5\aZ\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x6\vz\n\v\r\v\xE\v{\x3\v\x5\v\x7F\n\v\x3\v\x3\v"+
		"\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x5\x11\x97\n\x11\x3\x11"+
		"\x3\x11\x3\x12\x6\x12\x9C\n\x12\r\x12\xE\x12\x9D\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13"+
		"\xAC\n\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\xBC\n\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\a\x13\xD4\n\x13\f\x13\xE\x13\xD7\v\x13\x3\x14\x3\x14\x3\x14\x5\x14\xDC"+
		"\n\x14\x3\x15\x3\x15\x3\x15\a\x15\xE1\n\x15\f\x15\xE\x15\xE4\v\x15\x3"+
		"\x15\x2\x2\x3$\x16\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2"+
		"\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2\x2\x6"+
		"\x3\x2\x1A\x1B\x3\x2\x18\x19\x3\x2\"%\x3\x2&\'\xFA\x2,\x3\x2\x2\x2\x4"+
		"\x32\x3\x2\x2\x2\x6;\x3\x2\x2\x2\bM\x3\x2\x2\x2\nO\x3\x2\x2\x2\fR\x3\x2"+
		"\x2\x2\xE[\x3\x2\x2\x2\x10\x65\x3\x2\x2\x2\x12k\x3\x2\x2\x2\x14s\x3\x2"+
		"\x2\x2\x16\x82\x3\x2\x2\x2\x18\x87\x3\x2\x2\x2\x1A\x8B\x3\x2\x2\x2\x1C"+
		"\x8F\x3\x2\x2\x2\x1E\x92\x3\x2\x2\x2 \x94\x3\x2\x2\x2\"\x9B\x3\x2\x2\x2"+
		"$\xBB\x3\x2\x2\x2&\xDB\x3\x2\x2\x2(\xDD\x3\x2\x2\x2*-\x5\x4\x3\x2+-\x5"+
		"\b\x5\x2,*\x3\x2\x2\x2,+\x3\x2\x2\x2-.\x3\x2\x2\x2.,\x3\x2\x2\x2./\x3"+
		"\x2\x2\x2/\x30\x3\x2\x2\x2\x30\x31\a\x2\x2\x3\x31\x3\x3\x2\x2\x2\x32\x33"+
		"\a\x3\x2\x2\x33\x34\x5$\x13\x2\x34\x36\a\x11\x2\x2\x35\x37\x5\x6\x4\x2"+
		"\x36\x35\x3\x2\x2\x2\x36\x37\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38\x39\a"+
		"\x12\x2\x2\x39:\x5 \x11\x2:\x5\x3\x2\x2\x2;@\x5$\x13\x2<=\a\x17\x2\x2"+
		"=?\x5$\x13\x2><\x3\x2\x2\x2?\x42\x3\x2\x2\x2@>\x3\x2\x2\x2@\x41\x3\x2"+
		"\x2\x2\x41\a\x3\x2\x2\x2\x42@\x3\x2\x2\x2\x43N\x5\n\x6\x2\x44N\x5 \x11"+
		"\x2\x45N\x5\f\a\x2\x46N\x5\xE\b\x2GN\x5\x10\t\x2HN\x5\x12\n\x2IN\x5\x14"+
		"\v\x2JN\x5\x1A\xE\x2KN\x5\x1C\xF\x2LN\x5\x1E\x10\x2M\x43\x3\x2\x2\x2M"+
		"\x44\x3\x2\x2\x2M\x45\x3\x2\x2\x2M\x46\x3\x2\x2\x2MG\x3\x2\x2\x2MH\x3"+
		"\x2\x2\x2MI\x3\x2\x2\x2MJ\x3\x2\x2\x2MK\x3\x2\x2\x2ML\x3\x2\x2\x2N\t\x3"+
		"\x2\x2\x2OP\x5$\x13\x2PQ\a\x15\x2\x2Q\v\x3\x2\x2\x2RS\a\x4\x2\x2ST\a\x11"+
		"\x2\x2TU\x5$\x13\x2UV\a\x12\x2\x2VY\x5\b\x5\x2WX\a\x5\x2\x2XZ\x5\b\x5"+
		"\x2YW\x3\x2\x2\x2YZ\x3\x2\x2\x2Z\r\x3\x2\x2\x2[\\\a\x6\x2\x2\\]\a\x11"+
		"\x2\x2]^\x5$\x13\x2^_\a\x15\x2\x2_`\x5$\x13\x2`\x61\a\x15\x2\x2\x61\x62"+
		"\x5$\x13\x2\x62\x63\a\x12\x2\x2\x63\x64\x5 \x11\x2\x64\xF\x3\x2\x2\x2"+
		"\x65\x66\a\a\x2\x2\x66g\a\x11\x2\x2gh\x5$\x13\x2hi\a\x12\x2\x2ij\x5 \x11"+
		"\x2j\x11\x3\x2\x2\x2kl\a\b\x2\x2lm\x5 \x11\x2mn\a\a\x2\x2no\a\x11\x2\x2"+
		"op\x5$\x13\x2pq\a\x12\x2\x2qr\a\x15\x2\x2r\x13\x3\x2\x2\x2st\a\t\x2\x2"+
		"tu\a\x11\x2\x2uv\x5$\x13\x2vw\a\x12\x2\x2wy\a\x13\x2\x2xz\x5\x16\f\x2"+
		"yx\x3\x2\x2\x2z{\x3\x2\x2\x2{y\x3\x2\x2\x2{|\x3\x2\x2\x2|~\x3\x2\x2\x2"+
		"}\x7F\x5\x18\r\x2~}\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F\x80\x3\x2\x2\x2\x80"+
		"\x81\a\x14\x2\x2\x81\x15\x3\x2\x2\x2\x82\x83\a\n\x2\x2\x83\x84\x5$\x13"+
		"\x2\x84\x85\a\x16\x2\x2\x85\x86\x5\b\x5\x2\x86\x17\x3\x2\x2\x2\x87\x88"+
		"\a\v\x2\x2\x88\x89\a\x16\x2\x2\x89\x8A\x5\b\x5\x2\x8A\x19\x3\x2\x2\x2"+
		"\x8B\x8C\a\f\x2\x2\x8C\x8D\x5$\x13\x2\x8D\x8E\a\x15\x2\x2\x8E\x1B\x3\x2"+
		"\x2\x2\x8F\x90\a\r\x2\x2\x90\x91\a\x15\x2\x2\x91\x1D\x3\x2\x2\x2\x92\x93"+
		"\a\x15\x2\x2\x93\x1F\x3\x2\x2\x2\x94\x96\a\x13\x2\x2\x95\x97\x5\"\x12"+
		"\x2\x96\x95\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97\x98\x3\x2\x2\x2\x98\x99"+
		"\a\x14\x2\x2\x99!\x3\x2\x2\x2\x9A\x9C\x5\b\x5\x2\x9B\x9A\x3\x2\x2\x2\x9C"+
		"\x9D\x3\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E#\x3\x2\x2"+
		"\x2\x9F\xA0\b\x13\x1\x2\xA0\xBC\a,\x2\x2\xA1\xBC\a+\x2\x2\xA2\xBC\a)\x2"+
		"\x2\xA3\xBC\a(\x2\x2\xA4\xA5\x5&\x14\x2\xA5\xA6\a*\x2\x2\xA6\xBC\x3\x2"+
		"\x2\x2\xA7\xBC\a*\x2\x2\xA8\xA9\a*\x2\x2\xA9\xAB\a\x11\x2\x2\xAA\xAC\x5"+
		"(\x15\x2\xAB\xAA\x3\x2\x2\x2\xAB\xAC\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD"+
		"\xBC\a\x12\x2\x2\xAE\xAF\a\x18\x2\x2\xAF\xBC\x5$\x13\r\xB0\xB1\a\x19\x2"+
		"\x2\xB1\xBC\x5$\x13\f\xB2\xB3\a!\x2\x2\xB3\xBC\x5$\x13\v\xB4\xB5\a\x11"+
		"\x2\x2\xB5\xB6\x5$\x13\x2\xB6\xB7\a\x12\x2\x2\xB7\xBC\x3\x2\x2\x2\xB8"+
		"\xB9\a*\x2\x2\xB9\xBA\a\x1C\x2\x2\xBA\xBC\x5$\x13\x3\xBB\x9F\x3\x2\x2"+
		"\x2\xBB\xA1\x3\x2\x2\x2\xBB\xA2\x3\x2\x2\x2\xBB\xA3\x3\x2\x2\x2\xBB\xA4"+
		"\x3\x2\x2\x2\xBB\xA7\x3\x2\x2\x2\xBB\xA8\x3\x2\x2\x2\xBB\xAE\x3\x2\x2"+
		"\x2\xBB\xB0\x3\x2\x2\x2\xBB\xB2\x3\x2\x2\x2\xBB\xB4\x3\x2\x2\x2\xBB\xB8"+
		"\x3\x2\x2\x2\xBC\xD5\x3\x2\x2\x2\xBD\xBE\f\n\x2\x2\xBE\xBF\t\x2\x2\x2"+
		"\xBF\xD4\x5$\x13\v\xC0\xC1\f\t\x2\x2\xC1\xC2\t\x3\x2\x2\xC2\xD4\x5$\x13"+
		"\n\xC3\xC4\f\a\x2\x2\xC4\xC5\t\x4\x2\x2\xC5\xD4\x5$\x13\b\xC6\xC7\f\x6"+
		"\x2\x2\xC7\xC8\t\x5\x2\x2\xC8\xD4\x5$\x13\a\xC9\xCA\f\x5\x2\x2\xCA\xCB"+
		"\a\x1F\x2\x2\xCB\xD4\x5$\x13\x6\xCC\xCD\f\x4\x2\x2\xCD\xCE\a \x2\x2\xCE"+
		"\xD4\x5$\x13\x5\xCF\xD0\f\xF\x2\x2\xD0\xD4\a\x1D\x2\x2\xD1\xD2\f\xE\x2"+
		"\x2\xD2\xD4\a\x1E\x2\x2\xD3\xBD\x3\x2\x2\x2\xD3\xC0\x3\x2\x2\x2\xD3\xC3"+
		"\x3\x2\x2\x2\xD3\xC6\x3\x2\x2\x2\xD3\xC9\x3\x2\x2\x2\xD3\xCC\x3\x2\x2"+
		"\x2\xD3\xCF\x3\x2\x2\x2\xD3\xD1\x3\x2\x2\x2\xD4\xD7\x3\x2\x2\x2\xD5\xD3"+
		"\x3\x2\x2\x2\xD5\xD6\x3\x2\x2\x2\xD6%\x3\x2\x2\x2\xD7\xD5\x3\x2\x2\x2"+
		"\xD8\xDC\a\xE\x2\x2\xD9\xDC\a\xF\x2\x2\xDA\xDC\a\x10\x2\x2\xDB\xD8\x3"+
		"\x2\x2\x2\xDB\xD9\x3\x2\x2\x2\xDB\xDA\x3\x2\x2\x2\xDC\'\x3\x2\x2\x2\xDD"+
		"\xE2\x5$\x13\x2\xDE\xDF\a\x17\x2\x2\xDF\xE1\x5$\x13\x2\xE0\xDE\x3\x2\x2"+
		"\x2\xE1\xE4\x3\x2\x2\x2\xE2\xE0\x3\x2\x2\x2\xE2\xE3\x3\x2\x2\x2\xE3)\x3"+
		"\x2\x2\x2\xE4\xE2\x3\x2\x2\x2\x12,.\x36@MY{~\x96\x9D\xAB\xBB\xD3\xD5\xDB"+
		"\xE2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MiniC
