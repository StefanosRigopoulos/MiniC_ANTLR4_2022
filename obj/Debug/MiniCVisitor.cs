//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\UOP\7th Semester\Compilers II\Laboratory\MiniC\MiniC.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MiniC {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="MiniCParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface IMiniCVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>StatementCompound</c>
	/// labeled alternative in <see cref="MiniCParser.compound_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementCompound([NotNull] MiniCParser.StatementCompoundContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>SpecSTRING</c>
	/// labeled alternative in <see cref="MiniCParser.specifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSpecSTRING([NotNull] MiniCParser.SpecSTRINGContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>SpecDOUBLE</c>
	/// labeled alternative in <see cref="MiniCParser.specifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSpecDOUBLE([NotNull] MiniCParser.SpecDOUBLEContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>SpecINTEGER</c>
	/// labeled alternative in <see cref="MiniCParser.specifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSpecINTEGER([NotNull] MiniCParser.SpecINTEGERContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>StatementNULL</c>
	/// labeled alternative in <see cref="MiniCParser.null_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementNULL([NotNull] MiniCParser.StatementNULLContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>StatementSwitch</c>
	/// labeled alternative in <see cref="MiniCParser.switch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementSwitch([NotNull] MiniCParser.StatementSwitchContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>StatementFor</c>
	/// labeled alternative in <see cref="MiniCParser.for_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementFor([NotNull] MiniCParser.StatementForContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>StatementDoWhile</c>
	/// labeled alternative in <see cref="MiniCParser.do_while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementDoWhile([NotNull] MiniCParser.StatementDoWhileContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>StatementExpr</c>
	/// labeled alternative in <see cref="MiniCParser.expr_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementExpr([NotNull] MiniCParser.StatementExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>StatementIf</c>
	/// labeled alternative in <see cref="MiniCParser.if_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementIf([NotNull] MiniCParser.StatementIfContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExprINTEGER</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprINTEGER([NotNull] MiniCParser.ExprINTEGERContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExprSpecVARIABLE</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprSpecVARIABLE([NotNull] MiniCParser.ExprSpecVARIABLEContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExprComparison</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprComparison([NotNull] MiniCParser.ExprComparisonContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExprRelationalOperators</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprRelationalOperators([NotNull] MiniCParser.ExprRelationalOperatorsContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExprVARIABLE</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprVARIABLE([NotNull] MiniCParser.ExprVARIABLEContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExprNot</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprNot([NotNull] MiniCParser.ExprNotContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExprParenthesis</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprParenthesis([NotNull] MiniCParser.ExprParenthesisContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExprAddSub</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprAddSub([NotNull] MiniCParser.ExprAddSubContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExprAnd</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprAnd([NotNull] MiniCParser.ExprAndContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExprCOMMENT</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprCOMMENT([NotNull] MiniCParser.ExprCOMMENTContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExprUnaryPlus</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprUnaryPlus([NotNull] MiniCParser.ExprUnaryPlusContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExprMulDiv</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprMulDiv([NotNull] MiniCParser.ExprMulDivContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExprFCall</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprFCall([NotNull] MiniCParser.ExprFCallContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExprDOUBLE</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprDOUBLE([NotNull] MiniCParser.ExprDOUBLEContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExprOr</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprOr([NotNull] MiniCParser.ExprOrContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExprSTRING</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprSTRING([NotNull] MiniCParser.ExprSTRINGContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExprUnaryMinus</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprUnaryMinus([NotNull] MiniCParser.ExprUnaryMinusContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExprPlusOne</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprPlusOne([NotNull] MiniCParser.ExprPlusOneContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExprAssignment</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprAssignment([NotNull] MiniCParser.ExprAssignmentContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExprMinusOne</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprMinusOne([NotNull] MiniCParser.ExprMinusOneContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>StatementWhile</c>
	/// labeled alternative in <see cref="MiniCParser.while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementWhile([NotNull] MiniCParser.StatementWhileContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>StatementBREAK</c>
	/// labeled alternative in <see cref="MiniCParser.break_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementBREAK([NotNull] MiniCParser.StatementBREAKContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FunctionDefinition</c>
	/// labeled alternative in <see cref="MiniCParser.function_definition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionDefinition([NotNull] MiniCParser.FunctionDefinitionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>StatementRETURN</c>
	/// labeled alternative in <see cref="MiniCParser.return_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementRETURN([NotNull] MiniCParser.StatementRETURNContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.compileUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompileUnit([NotNull] MiniCParser.CompileUnitContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.function_definition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunction_definition([NotNull] MiniCParser.Function_definitionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.fargs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFargs([NotNull] MiniCParser.FargsContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] MiniCParser.StatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.expr_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_statement([NotNull] MiniCParser.Expr_statementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.if_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIf_statement([NotNull] MiniCParser.If_statementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.for_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFor_statement([NotNull] MiniCParser.For_statementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhile_statement([NotNull] MiniCParser.While_statementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.do_while_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDo_while_statement([NotNull] MiniCParser.Do_while_statementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.switch_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSwitch_statement([NotNull] MiniCParser.Switch_statementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.switch_case"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSwitch_case([NotNull] MiniCParser.Switch_caseContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.switch_default"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSwitch_default([NotNull] MiniCParser.Switch_defaultContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.return_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturn_statement([NotNull] MiniCParser.Return_statementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.break_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBreak_statement([NotNull] MiniCParser.Break_statementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.null_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNull_statement([NotNull] MiniCParser.Null_statementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.compound_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompound_statement([NotNull] MiniCParser.Compound_statementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.statements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatements([NotNull] MiniCParser.StatementsContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr([NotNull] MiniCParser.ExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.specifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSpecifier([NotNull] MiniCParser.SpecifierContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.args"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgs([NotNull] MiniCParser.ArgsContext context);
}
} // namespace MiniC
