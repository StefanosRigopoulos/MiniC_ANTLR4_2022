//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\UOP\7th Semester\Compilers II\Laboratory\MiniC\MiniC.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MiniC {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MiniCLexer : Lexer {
	public const int
		FUNCTION=1, IF=2, ELSE=3, FOR=4, WHILE=5, DO=6, SWITCH=7, CASE=8, DEFAULT=9, 
		RETURN=10, BREAK=11, INTSPECIFIER=12, DOUBLESPECIFIER=13, STRINGSPECIFIER=14, 
		LP=15, RP=16, LB=17, RB=18, SEMICOLON=19, COLON=20, COMMA=21, PLUS=22, 
		MINUS=23, MULTI=24, DIV=25, ASSIGN=26, PLUSONE=27, MINUSONE=28, AND=29, 
		OR=30, NOT=31, GT=32, GTE=33, LT=34, LTE=35, EQUAL=36, NEQUAL=37, DOUBLE=38, 
		INTEGER=39, VARIABLE=40, STRING=41, COMMENT=42, WS=43;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"FUNCTION", "IF", "ELSE", "FOR", "WHILE", "DO", "SWITCH", "CASE", "DEFAULT", 
		"RETURN", "BREAK", "INTSPECIFIER", "DOUBLESPECIFIER", "STRINGSPECIFIER", 
		"LP", "RP", "LB", "RB", "SEMICOLON", "COLON", "COMMA", "PLUS", "MINUS", 
		"MULTI", "DIV", "ASSIGN", "PLUSONE", "MINUSONE", "AND", "OR", "NOT", "GT", 
		"GTE", "LT", "LTE", "EQUAL", "NEQUAL", "DOUBLE", "INTEGER", "VARIABLE", 
		"STRING", "COMMENT", "WS"
	};


	public MiniCLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'function'", "'if'", "'else'", "'for'", "'while'", "'do'", "'switch'", 
		"'case'", "'default'", "'return'", "'break'", "'int'", "'double'", "'string'", 
		"'('", "')'", "'{'", "'}'", "';'", "':'", "','", "'+'", "'-'", "'*'", 
		"'/'", "'='", "'++'", "'--'", "'&&'", "'||'", "'!'", "'>'", "'>='", "'<'", 
		"'<='", "'=='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FUNCTION", "IF", "ELSE", "FOR", "WHILE", "DO", "SWITCH", "CASE", 
		"DEFAULT", "RETURN", "BREAK", "INTSPECIFIER", "DOUBLESPECIFIER", "STRINGSPECIFIER", 
		"LP", "RP", "LB", "RB", "SEMICOLON", "COLON", "COMMA", "PLUS", "MINUS", 
		"MULTI", "DIV", "ASSIGN", "PLUSONE", "MINUSONE", "AND", "OR", "NOT", "GT", 
		"GTE", "LT", "LTE", "EQUAL", "NEQUAL", "DOUBLE", "INTEGER", "VARIABLE", 
		"STRING", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2-\x134\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f"+
		"\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3"+
		"\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3"+
		"\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3"+
		"\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1F\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3\"\x3#\x3#\x3$\x3$\x3$"+
		"\x3%\x3%\x3%\x3&\x3&\x3&\x3\'\x5\'\xE2\n\'\x3\'\a\'\xE5\n\'\f\'\xE\'\xE8"+
		"\v\'\x3\'\x3\'\a\'\xEC\n\'\f\'\xE\'\xEF\v\'\x3(\x3(\x3(\a(\xF4\n(\f(\xE"+
		"(\xF7\v(\x5(\xF9\n(\x3)\x3)\a)\xFD\n)\f)\xE)\x100\v)\x3*\x3*\x3*\x3*\x3"+
		"*\x3*\a*\x108\n*\f*\xE*\x10B\v*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\a*\x114\n"+
		"*\f*\xE*\x117\v*\x3*\x5*\x11A\n*\x3+\x3+\x3+\x3+\x3+\a+\x121\n+\f+\xE"+
		"+\x124\v+\x3+\x3+\x3+\x3+\a+\x12A\n+\f+\xE+\x12D\v+\x5+\x12F\n+\x3,\x3"+
		",\x3,\x3,\x3\x122\x2\x2-\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2"+
		"\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D"+
		"\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2"+
		"\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E;\x2"+
		"\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45\x2$G\x2%I\x2&K\x2\'M\x2(O\x2)Q\x2"+
		"*S\x2+U\x2,W\x2-\x3\x2\n\x4\x2--//\x3\x2\x32;\x3\x2\x33;\x4\x2\x43\\\x63"+
		"|\x6\x2\x32;\x43\\\x61\x61\x63|\x4\x2\f\f$$\x4\x2\f\f))\x5\x2\v\f\xF\xF"+
		"\"\"\x144\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3"+
		"\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3"+
		"\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2"+
		"\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2"+
		"\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2"+
		")\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3"+
		"\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2"+
		"\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41"+
		"\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2"+
		"I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2O\x3\x2\x2\x2\x2Q\x3\x2"+
		"\x2\x2\x2S\x3\x2\x2\x2\x2U\x3\x2\x2\x2\x2W\x3\x2\x2\x2\x3Y\x3\x2\x2\x2"+
		"\x5\x62\x3\x2\x2\x2\a\x65\x3\x2\x2\x2\tj\x3\x2\x2\x2\vn\x3\x2\x2\x2\r"+
		"t\x3\x2\x2\x2\xFw\x3\x2\x2\x2\x11~\x3\x2\x2\x2\x13\x83\x3\x2\x2\x2\x15"+
		"\x8B\x3\x2\x2\x2\x17\x92\x3\x2\x2\x2\x19\x98\x3\x2\x2\x2\x1B\x9C\x3\x2"+
		"\x2\x2\x1D\xA3\x3\x2\x2\x2\x1F\xAA\x3\x2\x2\x2!\xAC\x3\x2\x2\x2#\xAE\x3"+
		"\x2\x2\x2%\xB0\x3\x2\x2\x2\'\xB2\x3\x2\x2\x2)\xB4\x3\x2\x2\x2+\xB6\x3"+
		"\x2\x2\x2-\xB8\x3\x2\x2\x2/\xBA\x3\x2\x2\x2\x31\xBC\x3\x2\x2\x2\x33\xBE"+
		"\x3\x2\x2\x2\x35\xC0\x3\x2\x2\x2\x37\xC2\x3\x2\x2\x2\x39\xC5\x3\x2\x2"+
		"\x2;\xC8\x3\x2\x2\x2=\xCB\x3\x2\x2\x2?\xCE\x3\x2\x2\x2\x41\xD0\x3\x2\x2"+
		"\x2\x43\xD2\x3\x2\x2\x2\x45\xD5\x3\x2\x2\x2G\xD7\x3\x2\x2\x2I\xDA\x3\x2"+
		"\x2\x2K\xDD\x3\x2\x2\x2M\xE1\x3\x2\x2\x2O\xF8\x3\x2\x2\x2Q\xFA\x3\x2\x2"+
		"\x2S\x119\x3\x2\x2\x2U\x12E\x3\x2\x2\x2W\x130\x3\x2\x2\x2YZ\ah\x2\x2Z"+
		"[\aw\x2\x2[\\\ap\x2\x2\\]\a\x65\x2\x2]^\av\x2\x2^_\ak\x2\x2_`\aq\x2\x2"+
		"`\x61\ap\x2\x2\x61\x4\x3\x2\x2\x2\x62\x63\ak\x2\x2\x63\x64\ah\x2\x2\x64"+
		"\x6\x3\x2\x2\x2\x65\x66\ag\x2\x2\x66g\an\x2\x2gh\au\x2\x2hi\ag\x2\x2i"+
		"\b\x3\x2\x2\x2jk\ah\x2\x2kl\aq\x2\x2lm\at\x2\x2m\n\x3\x2\x2\x2no\ay\x2"+
		"\x2op\aj\x2\x2pq\ak\x2\x2qr\an\x2\x2rs\ag\x2\x2s\f\x3\x2\x2\x2tu\a\x66"+
		"\x2\x2uv\aq\x2\x2v\xE\x3\x2\x2\x2wx\au\x2\x2xy\ay\x2\x2yz\ak\x2\x2z{\a"+
		"v\x2\x2{|\a\x65\x2\x2|}\aj\x2\x2}\x10\x3\x2\x2\x2~\x7F\a\x65\x2\x2\x7F"+
		"\x80\a\x63\x2\x2\x80\x81\au\x2\x2\x81\x82\ag\x2\x2\x82\x12\x3\x2\x2\x2"+
		"\x83\x84\a\x66\x2\x2\x84\x85\ag\x2\x2\x85\x86\ah\x2\x2\x86\x87\a\x63\x2"+
		"\x2\x87\x88\aw\x2\x2\x88\x89\an\x2\x2\x89\x8A\av\x2\x2\x8A\x14\x3\x2\x2"+
		"\x2\x8B\x8C\at\x2\x2\x8C\x8D\ag\x2\x2\x8D\x8E\av\x2\x2\x8E\x8F\aw\x2\x2"+
		"\x8F\x90\at\x2\x2\x90\x91\ap\x2\x2\x91\x16\x3\x2\x2\x2\x92\x93\a\x64\x2"+
		"\x2\x93\x94\at\x2\x2\x94\x95\ag\x2\x2\x95\x96\a\x63\x2\x2\x96\x97\am\x2"+
		"\x2\x97\x18\x3\x2\x2\x2\x98\x99\ak\x2\x2\x99\x9A\ap\x2\x2\x9A\x9B\av\x2"+
		"\x2\x9B\x1A\x3\x2\x2\x2\x9C\x9D\a\x66\x2\x2\x9D\x9E\aq\x2\x2\x9E\x9F\a"+
		"w\x2\x2\x9F\xA0\a\x64\x2\x2\xA0\xA1\an\x2\x2\xA1\xA2\ag\x2\x2\xA2\x1C"+
		"\x3\x2\x2\x2\xA3\xA4\au\x2\x2\xA4\xA5\av\x2\x2\xA5\xA6\at\x2\x2\xA6\xA7"+
		"\ak\x2\x2\xA7\xA8\ap\x2\x2\xA8\xA9\ai\x2\x2\xA9\x1E\x3\x2\x2\x2\xAA\xAB"+
		"\a*\x2\x2\xAB \x3\x2\x2\x2\xAC\xAD\a+\x2\x2\xAD\"\x3\x2\x2\x2\xAE\xAF"+
		"\a}\x2\x2\xAF$\x3\x2\x2\x2\xB0\xB1\a\x7F\x2\x2\xB1&\x3\x2\x2\x2\xB2\xB3"+
		"\a=\x2\x2\xB3(\x3\x2\x2\x2\xB4\xB5\a<\x2\x2\xB5*\x3\x2\x2\x2\xB6\xB7\a"+
		".\x2\x2\xB7,\x3\x2\x2\x2\xB8\xB9\a-\x2\x2\xB9.\x3\x2\x2\x2\xBA\xBB\a/"+
		"\x2\x2\xBB\x30\x3\x2\x2\x2\xBC\xBD\a,\x2\x2\xBD\x32\x3\x2\x2\x2\xBE\xBF"+
		"\a\x31\x2\x2\xBF\x34\x3\x2\x2\x2\xC0\xC1\a?\x2\x2\xC1\x36\x3\x2\x2\x2"+
		"\xC2\xC3\a-\x2\x2\xC3\xC4\a-\x2\x2\xC4\x38\x3\x2\x2\x2\xC5\xC6\a/\x2\x2"+
		"\xC6\xC7\a/\x2\x2\xC7:\x3\x2\x2\x2\xC8\xC9\a(\x2\x2\xC9\xCA\a(\x2\x2\xCA"+
		"<\x3\x2\x2\x2\xCB\xCC\a~\x2\x2\xCC\xCD\a~\x2\x2\xCD>\x3\x2\x2\x2\xCE\xCF"+
		"\a#\x2\x2\xCF@\x3\x2\x2\x2\xD0\xD1\a@\x2\x2\xD1\x42\x3\x2\x2\x2\xD2\xD3"+
		"\a@\x2\x2\xD3\xD4\a?\x2\x2\xD4\x44\x3\x2\x2\x2\xD5\xD6\a>\x2\x2\xD6\x46"+
		"\x3\x2\x2\x2\xD7\xD8\a>\x2\x2\xD8\xD9\a?\x2\x2\xD9H\x3\x2\x2\x2\xDA\xDB"+
		"\a?\x2\x2\xDB\xDC\a?\x2\x2\xDCJ\x3\x2\x2\x2\xDD\xDE\a#\x2\x2\xDE\xDF\a"+
		"?\x2\x2\xDFL\x3\x2\x2\x2\xE0\xE2\t\x2\x2\x2\xE1\xE0\x3\x2\x2\x2\xE1\xE2"+
		"\x3\x2\x2\x2\xE2\xE6\x3\x2\x2\x2\xE3\xE5\t\x3\x2\x2\xE4\xE3\x3\x2\x2\x2"+
		"\xE5\xE8\x3\x2\x2\x2\xE6\xE4\x3\x2\x2\x2\xE6\xE7\x3\x2\x2\x2\xE7\xE9\x3"+
		"\x2\x2\x2\xE8\xE6\x3\x2\x2\x2\xE9\xED\a\x30\x2\x2\xEA\xEC\t\x3\x2\x2\xEB"+
		"\xEA\x3\x2\x2\x2\xEC\xEF\x3\x2\x2\x2\xED\xEB\x3\x2\x2\x2\xED\xEE\x3\x2"+
		"\x2\x2\xEEN\x3\x2\x2\x2\xEF\xED\x3\x2\x2\x2\xF0\xF9\a\x32\x2\x2\xF1\xF5"+
		"\t\x4\x2\x2\xF2\xF4\t\x3\x2\x2\xF3\xF2\x3\x2\x2\x2\xF4\xF7\x3\x2\x2\x2"+
		"\xF5\xF3\x3\x2\x2\x2\xF5\xF6\x3\x2\x2\x2\xF6\xF9\x3\x2\x2\x2\xF7\xF5\x3"+
		"\x2\x2\x2\xF8\xF0\x3\x2\x2\x2\xF8\xF1\x3\x2\x2\x2\xF9P\x3\x2\x2\x2\xFA"+
		"\xFE\t\x5\x2\x2\xFB\xFD\t\x6\x2\x2\xFC\xFB\x3\x2\x2\x2\xFD\x100\x3\x2"+
		"\x2\x2\xFE\xFC\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFFR\x3\x2\x2\x2\x100\xFE"+
		"\x3\x2\x2\x2\x101\x109\a$\x2\x2\x102\x108\n\a\x2\x2\x103\x104\a^\x2\x2"+
		"\x104\x108\a\f\x2\x2\x105\x106\a^\x2\x2\x106\x108\v\x2\x2\x2\x107\x102"+
		"\x3\x2\x2\x2\x107\x103\x3\x2\x2\x2\x107\x105\x3\x2\x2\x2\x108\x10B\x3"+
		"\x2\x2\x2\x109\x107\x3\x2\x2\x2\x109\x10A\x3\x2\x2\x2\x10A\x10C\x3\x2"+
		"\x2\x2\x10B\x109\x3\x2\x2\x2\x10C\x11A\a$\x2\x2\x10D\x115\a)\x2\x2\x10E"+
		"\x114\n\b\x2\x2\x10F\x110\a^\x2\x2\x110\x114\a\f\x2\x2\x111\x112\a^\x2"+
		"\x2\x112\x114\v\x2\x2\x2\x113\x10E\x3\x2\x2\x2\x113\x10F\x3\x2\x2\x2\x113"+
		"\x111\x3\x2\x2\x2\x114\x117\x3\x2\x2\x2\x115\x113\x3\x2\x2\x2\x115\x116"+
		"\x3\x2\x2\x2\x116\x118\x3\x2\x2\x2\x117\x115\x3\x2\x2\x2\x118\x11A\a)"+
		"\x2\x2\x119\x101\x3\x2\x2\x2\x119\x10D\x3\x2\x2\x2\x11AT\x3\x2\x2\x2\x11B"+
		"\x11C\a\x31\x2\x2\x11C\x11D\a,\x2\x2\x11D\x122\x3\x2\x2\x2\x11E\x121\v"+
		"\x2\x2\x2\x11F\x121\a\f\x2\x2\x120\x11E\x3\x2\x2\x2\x120\x11F\x3\x2\x2"+
		"\x2\x121\x124\x3\x2\x2\x2\x122\x123\x3\x2\x2\x2\x122\x120\x3\x2\x2\x2"+
		"\x123\x125\x3\x2\x2\x2\x124\x122\x3\x2\x2\x2\x125\x126\a,\x2\x2\x126\x12F"+
		"\a^\x2\x2\x127\x12B\a^\x2\x2\x128\x12A\v\x2\x2\x2\x129\x128\x3\x2\x2\x2"+
		"\x12A\x12D\x3\x2\x2\x2\x12B\x129\x3\x2\x2\x2\x12B\x12C\x3\x2\x2\x2\x12C"+
		"\x12F\x3\x2\x2\x2\x12D\x12B\x3\x2\x2\x2\x12E\x11B\x3\x2\x2\x2\x12E\x127"+
		"\x3\x2\x2\x2\x12FV\x3\x2\x2\x2\x130\x131\t\t\x2\x2\x131\x132\x3\x2\x2"+
		"\x2\x132\x133\b,\x2\x2\x133X\x3\x2\x2\x2\x12\x2\xE1\xE6\xED\xF5\xF8\xFE"+
		"\x107\x109\x113\x115\x119\x120\x122\x12B\x12E\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MiniC
